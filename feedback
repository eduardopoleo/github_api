  FEEDBACK:

  Hey guys I found the content of this lesson very interesting but it was not always easy to follow
  throughout the assignments. In part because sometimes the code structure and method
  naming changed drastically. For example

  1) ```needs_revalidation?``` vs ```mandatory_refresh?```

  In "Assignment: Respect Response Cache-Control Header"

  ```ruby
  def needs_revalidation?(cached_response)
    cached_response.headers['Cache-Control'].include?('no-cache') || cached_response.headers['Cache-Control'].include?('must-revalidate')
  end
  ```

  In Assignment: **Expire Caches that Exceed Max Age**, the exact same method changes naming to

  ```ruby
  def mandatory_refresh?(cached_response)
    cached_response.headers['Cache-Control'].include?('no-cache') || cached_response.headers['Cache-Control'].include?('must-revalidate')
  end
  ```

  In Assignment: **Smart Cache with Conditional Requests** goes back again to

  ```ruby
  def needs_revalidation?(cached_response)
    #why did we remove the include anymore it seemed more accurate
    cached_response.headers['Cache-Control'] == 'no-cache' || cached_response.headers['Cache-Control'] == 'must-revalidate'
  end
  ```
  2) When checking for the type of request

  In Assignment: **Respect Response Cache-Control Header**

  ```ruby
  def cachable_response?(env)
    env.method == :get ...
  end
  ```

  In Assignment: **Expire Caches that Exceed Max Age**

  ```ruby
  return response unless env.method == :get
  ```
  In Assignment: **Smart Cache with Conditional Requests** goes back to being inside a method

  ```ruby
  def cachable_response?(env)
    env.method == :get ...
  end
  ```

  When we get to:
  **Smart Cache with Conditional Requests**, The code is a bit complicated already
  It would be nice to have some comments along side the methods to have a quick idea of what they do
  without having to dig deep down. Something like this:

  ```ruby
  if cached_response
    if fresh?(cached_response) #checks if the response has exceeded the max-age
      return cached_response if !needs_revalidation?(cached_response) #Checks for the headers "no-cached" and "must-revalidate"
    else
      env.request_headers["If-None-Match"] = cached_response.headers['ETag']
    end
  end
  ```
  I find this kind of commenting useful when I learning new concepts.

  Finally shouldn't these "support" methods (e.g fresh?, needs_revalidation?) be private?
